;; -----------------------------------------------------------------------------
;; Do not edit this file by hand! It is generated by the org-mode file:
;;
;; dot_emacs.org
;;
;; Make any changes to the .org file and re-tangle (M-x org-babel-tangle).
;; -----------------------------------------------------------------------------

  ;; Initialize the package system for Ensime:
  (require 'package)
  (setq
   package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
		      ("org" . "http://orgmode.org/elpa/")
                      ("melpa" . "http://melpa.org/packages/")
		      ("melpa-stable" . "http://stable.melpa.org/packages/")))
    ;;  (add-to-list 'package-archives
    ;;  	     '("marmalade" . "http://marmalade-repo.org/packages/"))
    ;; (add-to-list 'package-archives
    ;; 	     '("melpa-stable" . "http://stable.melpa.org/packages/"))

    (package-initialize)

    (when (not package-archive-contents)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)

;;  (use-package auctex
;;    :ensure t
;;    :pin gnu)

  (use-package auto-complete
    :ensure t
    :pin melpa-stable)

  (use-package bash-completion
    :ensure t
    :pin melpa-stable)

  ;; (use-package cl
  ;;   :ensure t
  ;;   :pin melpa)

(use-package ein
  :ensure t
  :pin melpa
 )

(use-package elpy
    :ensure t
    :pin melpa-stable
    :config
    (delete ".\\highlight\\" elpy-modules))

  ;;(use-package ensime
  ;;	     :ensure t
  ;;	     :pin melpa-stable)

  (use-package ess
    :ensure t
    :pin melpa-stable)

  (use-package magit
    :ensure t
    :pin melpa)

  (use-package markdown-mode
    :ensure t
    :pin melpa-stable)

  (use-package org
      :ensure t
      :pin org)

  (use-package w3m
    :ensure t
    :pin melpa)

  (use-package which-key
    :ensure t
    :pin melpa-stable)

  (use-package yaml-mode
    :ensure t
    :pin melpa-stable
    :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

  ;; Add to emacs init
  ;;(add-to-list 'load-path "~/.emacs.d/site-lisp/magit/lisp")
  (require 'magit)
  ;; auto-complete is manually installed to the site-lisp directory
  (require 'auto-complete)

;; Keybindings changes ;;
;; Magit
(global-set-key (kbd "\C-x g") 'magit-status)
(global-set-key (kbd "\C-c g") 'magit-status)
(global-set-key (kbd "\C-x \M-g") 'magit-dispatch)
(global-set-key (kbd "\C-c \C-g") 'magit-dispatch)
(global-set-key (kbd "\C-x \C-g") 'magit-dispatch)

;; Ctrl sequence to invoke Meta.
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

;; Ctrl sequence to backward kill word.
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

;; remap command-p (super-p) for Mac
;; see: http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html
(global-unset-key (kbd "s-p"))

;; keybindings for window splitting
(global-set-key (kbd "<f8>") 'other-window)
(defun prev-window ()
  (interactive)
  (other-window -1))
(global-set-key (kbd "<f9>") 'prev-window)
(global-set-key (kbd "<f6>") 'delete-window)

  ;; Turn off bell noises
  (setq ring-bell-function #'ignore)
  ;; Don't turn off the menu bar by default. As of Emacs 26.1 you have to do
  ;; this for menus on OS X.
  ;; (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(let (my-system-font)
  (progn
    (when (eq system-type 'cygwin)
      (if (eq window-system 'x)
	  (setq my-system-font "6x13"))
      (if (eq window-system 'w32)
	  (setq my-system-font "Consolas")))

    (when (eq system-type 'darwin )
      (if (eq window-system 'ns)
	  (setq my-system-font "Menlo 24"))
      (if (eq window-system 'x)
	  (setq my-system-font "6x13")))

    (when (eq system-type 'gnu/linux)
      (setq my-system-font "6x13"))

    (if my-system-font
	(set-face-attribute 'default nil :font my-system-font))))

;; ;; keep a list of recently opened files
;; (recentf-mode 1)

;; Higlight matching parentheses
(show-paren-mode t)
(setq show-paren-style 'expression)
;; ;; Enable automatic character pairing
;;(electric-pair-mode t)
;; Disable automatic indentation
(electric-indent-mode nil)


;; Display column number as well as line number in status bar
(column-number-mode t)
;; Display time, day, and date in status bar
(set-time-zone-rule "America/Los_Angeles")
(setq display-time-day-and-date t)
(display-time-mode t)
;; Default fill line length
(setq-default fill-column 75)

;; ;; ibuffer mode
(defalias 'list-buffers 'ibuffer)

;; make buffer switch command show suggestions
;; (ido-mode 1)

;; color themes
;; (add-to-list 'custom-theme-load-path "~/projects/emacs-color-theme-solarized")
;; (setq frame-background-mode (quote dark))
(load-theme 'tango-dark t)

(add-to-list 'default-frame-alist '(height . 36))
(add-to-list 'default-frame-alist '(width . 135))

;; Install auto-complete mode for ESS
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/elisp/dict")
(ac-config-default)

;; ;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Emacs major modes  ;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;

;; Recent Emacsen don't need this method, we can just require directly.
;; (add-hook 'dired-load-hook '(lambda () (require 'dired-x)))
(require 'dired-x)
;; Ignore dot files
(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
(when (eq system-type 'darwin)       
  (setq dired-use-ls-dired nil))

;; ESS for statistics
(require 'ess-site)
(setq ess-default-style 'RStudio)

;;
;; Org mode Stuff
;;
(require 'org)

;;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))

;;(require 'org-install)
;; various org mode convenience features
(setq org-insert-mode-line-in-empty-file t)
;; load agenda files
(setq org-agenda-files (quote "~/Dropbox/org/agenda.org"))
;; I don't like the deadline warnings; if I can't see them in week
;; view, no need to worry about them.
(setq org-deadline-warning-days 0)

;; hide leading stars for cleaner look

;; So that the leading headline stars are grey:
(setq org-hide-leading-stars t)
;; Note update to set both `foreground` and `distant-foreground`:
(set-face-attribute 'org-hide nil :foreground "grey" :distant-foreground "grey")

;; (setq org-hide t (:foreground "gray"))
;; no colors for headline text
(setq org-level-color-stars-only t)
;; turn on Org spped keys
(setq org-use-speed-commands t)

;; org-agenda views
(setq org-agenda-restore-windows-after-quit t)
;; The agenda should appear in a new frame
(setq org-agenda-window-setup (quote current-window))

;; Org mode keybindings
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cl" 'org-store-link)

;; org-src settings
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
;; By default we ask for confirmation every time we evaluate a code
;; block.
(setq org-confirm-babel-evaluate nil)

;; Edit org-src code in the other window, rather than rearranging the
;; frames. I generally dislike rearragning frames and try to avoid it.
(setq org-src-window-setup 'other-window)

;; ;; org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (R . t)
   (ruby . t)
   (awk . t)
   (ditaa . t)
   (emacs-lisp . t)
   (makefile . t)))

;; (add-to-list 'org-src-lang-modes '("latex" . LaTeX))
(add-to-list 'org-src-lang-modes '("R" . R))
(add-to-list 'org-src-lang-modes '("js" . javascript))

;; Preserve leading whitespace characters in SRC blocks. Note: this is
;; important for making makefile tabs tangle correctly.
(setq org-src-preserve-indentation t)

;; org-tags-column sets the alignement for tags. Negative values
;; specify right alignment.
(setq org-tags-column -80)
(setq org-agenda-tags-column -130)

;; TODO state keywords configuration
(setq org-todo-keywords
      (quote ((sequence "TODO(t)"
			"IN-PROGRESS(i)"
			"|" "DONE(d)")
	      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

(setq org-todo-keyword-faces
      (quote (
	      ("TODO" :foreground "darkgreen" :weight bold)
	      ("IN-PROGRESS" :foreground "blue" :weight bold)
	      ("DONE" :foreground "cyan" :weight bold))))
;;

;; Enable logging timestamp when a task enters the DONE state
(setq org-log-done t)
;; Select states using shortcut keys from the fast todo selection
;; menu. This is extremely useful. Shortcut keys are defined in
;; org-todo-keywords.
(setq org-use-fast-todo-selection t)
;; Quickly cycle through todo states with S-left and S-right. This is
;; useful for changing the todo state keyword (for, e.g., a mistaken
;; entry) without changing the log entry.
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
;; enable Markdown export from org
(add-to-list 'org-export-backends 'md)

(setq org-mobile-directory "~/Dropbox/org/MobileOrg")



;; ;; ;; emacs-w3m for web browsing
;; ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/w3m")
;; ;; (require 'w3m-load)
;; ;; ;; Use cookies so gmail works
;; ;; (setq w3m-use-cookies t)

;; Tramp mode defaults
(require 'tramp)
(setq tramp-default-method "ssh")

(setq doc-view-continuous t)

;; ;; CEDET
;; ;;(load-file "~/emacs/site-lisp/cedet-1.1/common/cedet.el")
;; ;; Enable EDE (project management) features
;; (global-ede-mode 1)
;; ;;(require 'semantic/sb)
;; (semantic-mode 1)
;; ;; Enable Semantic
;; ;;(semantic-load-enable-code-helpers)
;; (require 'semantic/analyze)
;; (provide 'semantic-analyze)
;; (provide 'semantic-ctxt)
;; (provide 'semanticdb)
;; (provide 'semanticdb-find)
;; (provide 'semanticdb-mode)
;; (provide 'semantic-load)

;; ;; ECB
;; (add-to-list 'load-path "~/emacs/site-lisp/ecb-2.40")
;; (require 'ecb)

;; ;; nXhtml mode
;; ;;(load "~/emacs/nxhtml/autostart.el")

;; For compliance with Swoop coding standards
(setq js-indent-level 2)

(setq sql-postgres-login-params
      '((user :default "bstrauss")
	(database :default "enterprisedatawarehouse")
	(server :default "redshift.emdeon.net")
	(port :default 5439)))

(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))

  ;; ;; Start a shell running.
  ;;(shell)
  ;; ;; rename the shell to *shell_local*
  ;;(rename-buffer "*shell_local*")

(setq confirm-kill-emacs (quote yes-or-no-p))

;;(server-start)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fixed-pitch ((t (:family "Menlo"))))
 '(markdown-code-face ((t (:inherit fixed-pitch)))))

;; ;; (custom-set-variables
;; ;;  ;; custom-set-variables was added by Custom.
;; ;;  ;; If you edit it by hand, you could mess it up, so be careful.
;; ;;  ;; Your init file should contain only one such instance.
;; ;;  ;; If there is more than one, they won't work right.
;; ;;  '(ansi-color-names-vector ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#657b83"])
;; ;;  '(background-color "#002b36")
;; ;;  '(background-mode dark)
;; ;;  '(confirm-kill-emacs (quote yes-or-no-p))
;; ;;  '(cursor-color "#839496")
;; ;;  '(custom-enabled-themes nil)
;; ;;  '(custom-safe-themes (quote ("1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" default)))
;; ;;  '(doc-view-continuous t)
;; ;;  '(foreground-color "#839496")
;; ;;  '(org-agenda-restore-windows-after-quit t)
;; ;;  '(org-agenda-window-setup (quote other-frame))
;; ;;  '(org-format-latex-options (quote (:foreground default :background default :scale 1.3 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))))
;; ;;  '(org-indirect-buffer-display (quote current-window))
;; ;;  '(org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame))))
;; ;;  '(preview-scale-function (quote preview-scale-from-face))
;; ;;  '(type-break-good-rest-interval 300)
;; ;;  '(type-break-interval 3000)
;; ;;  '(type-break-keystroke-threshold (quote (2100 . 10500)))
;; ;;  '(type-break-mode-line-message-mode t))
;; ;; (custom-set-faces
;; ;;  ;; custom-set-faces was added by Custom.
;; ;;  ;; If you edit it by hand, you could mess it up, so be careful.
;; ;;  ;; Your init file should contain only one such instance.
;; ;;  ;; If there is more than one, they won't work right.
;; ;;  '(org-hide ((t (:foreground "gray")))))
;; (custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(custom-safe-themes (quote ("fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" "1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" default))))
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  )
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(tango))
 '(electric-indent-mode nil)
 '(elpy-modules
   '(elpy-module-company elpy-module-eldoc elpy-module-flymake elpy-module-pyvenv elpy-module-yasnippet elpy-module-django elpy-module-sane-defaults))
 '(ledger-complete-in-steps t)
 '(ledger-highlight-xact-under-point nil)
 '(ledger-post-amount-alignment-at :decimal)
 '(ledger-post-amount-alignment-column 60)
 '(org-adapt-indentation nil)
 '(package-selected-packages
   '(cl yaml-mode which-key w3m use-package markdown-mode magit ledger-mode go-mode ess enh-ruby-mode elpy ein bash-completion auto-complete auctex))
 '(tab-always-indent 'complete))
